"0","# measurement model "
"0","dmeas <- Csnippet("""
"0","                  if (ISNA(cases1)) {"
"0","                  lik = (give_log) ? 0 : 1;"
"0","                  } else {"
"0","                  lik =  dnbinom_mu(cases1, 1/od, H1, 1) +"
"0","                  dnbinom_mu(cases2, 1/od, H2, 1) +"
"0","                  dnbinom_mu(cases3, 1/od, H3, 1);"
"0","                  lik = (give_log) ? lik : exp(lik);}"")"
"0","rmeas <-  Csnippet("""
"0","                   cases1 = rnbinom_mu(1/od,H1);"
"0","                   cases2 = rnbinom_mu(1/od,H2);"
"0","                   cases3 = rnbinom_mu(1/od,H3);"")"
"0",""
"0",""
"0",""
"0","# process model is Markovian SIRS with 3 age classes"
"0","sir.step <- Csnippet("""
"0","                     double rate[19];"
"0","                     double dN[19];"
"0","                     double Beta1;"
"0","                     double Beta2;"
"0","                     double Beta3;"
"0","                     double I;"
"0","                     double dW;"
"0","                     "
"0","                     // compute the environmental stochasticity"
"0","                     dW = rgammawn(sigma,dt);"
"0","                     I= I1+I2+I3;"
"0","                     Beta1 = beta1*(1 + beta11 * cos(M_2PI/52*t + phi));"
"0","                     Beta2 = beta2*(1 + beta11 * cos(M_2PI/52*t + phi));"
"0","                     Beta3 = beta3*(1 + beta11 * cos(M_2PI/52*t + phi));"
"0","                     rate[0] = alpha*N;         // Birth"
"0","                     rate[1] = Beta1*I/N*dW/dt; // S1 Trans: dW is gamma white noise, i.e. st in X."
"0","                     rate[2] = delta1;          // S1 Aging"
"0","                     rate[3] = Beta2*I/N*dW/dt; // S2 Trans"
"0","                     rate[4] = delta2;          // S2 Aging"
"0","                     rate[5] = Beta3*I/N*dW/dt; // S3 Trans"
"0","                     rate[6] = mu;              // S3 Death"
"0","                     rate[7] = gamma;           // I1 Trans"
"0","                     rate[8] = delta1;          // I2 Aging"
"0","                     rate[9] = gamma;           // I2 Trnas"
"0","                     rate[10] = delta2;         // I2 Aging"
"0","                     rate[11] = gamma;          // I3 Trans"
"0","                     rate[12] = mu;             // I3 Death"
"0","                     rate[13] = delta1;         // R1 Aging"
"0","                     rate[14] = omega;          // R1 Trans"
"0","                     rate[15] = delta2;         // R2 Aging"
"0","                     rate[16] = omega;          // R2 Trans"
"0","                     rate[17] = mu;             // R3 Death"
"0","                     rate[18] = omega;          // R3 Trans"
"0","                     dN[0] = rpois(rate[0]*dt); // alpha*N*dt"
"0","                     reulermultinom(2, S1, &rate[1], dt, &dN[1]);"
"0","                     reulermultinom(2, S2, &rate[3], dt, &dN[3]);"
"0","                     reulermultinom(2, S3, &rate[5], dt, &dN[5]);"
"0","                     reulermultinom(2, I1, &rate[7], dt, &dN[7]);"
"0","                     reulermultinom(2, I2, &rate[9], dt, &dN[9]);"
"0","                     reulermultinom(2, I3, &rate[11], dt, &dN[11]);"
"0","                     reulermultinom(2, R1, &rate[13], dt, &dN[13]);"
"0","                     reulermultinom(2, R2, &rate[15], dt, &dN[15]);"
"0","                     reulermultinom(2, R3, &rate[17], dt, &dN[17]);"
"0","                     S1 += dN[0] - dN[1] - dN[2] + dN[14];"
"0","                     S2 += dN[2] - dN[3] - dN[4]  + dN[16];"
"0","                     S3 += dN[4] - dN[5] - dN[6] + dN[18];"
"0","                     I1 += dN[1]          - dN[7] - dN[8];"
"0","                     I2 += dN[3] + dN[8]  - dN[9] - dN[10];"
"0","                     I3 += dN[5] + dN[10] - dN[11] - dN[12];"
"0","                     R1 += dN[7]           - dN[13] - dN[14];"
"0","                     R2 += dN[9]  + dN[13] - dN[15] - dN[16];"
"0","                     R3 += dN[11] + dN[15] - dN[17] - dN[18];"
"0","                     H1 += dN[1];"
"0","                     H2 += dN[3];"
"0","                     H3 += dN[5];"
"0","                     "")"
"0",""
"0",""
"0",""
"0","# ------------ deterministic skeleton-----------------------------"
"0","sir.skel <- """
"0","double rate[19];"
"0","double term[19];"
"0","double Beta1;"
"0","double Beta2;"
"0","double Beta3;"
"0",""
"0","Beta1 = beta1*(1 + beta11 * cos(M_2PI/52*t + phi)); //seasonal forcing"
"0","Beta2 = beta2*(1 + beta11 * cos(M_2PI/52*t + phi)); //seasonal forcing"
"0","Beta3 = beta3*(1 + beta11 * cos(M_2PI/52*t + phi)); //seasonal forcing"
"0",""
"0","rate[0] = alpha*N;"
"0","rate[1] = Beta1*(I1+I2+I3)/N;"
"0","rate[2] = delta1;"
"0",""
"0","rate[3] = Beta2*(I1+I2+I3)/N;"
"0","rate[4] = delta2;"
"0",""
"0","rate[5] = Beta3*(I1+I2+I3)/N;"
"0","rate[6] = mu;"
"0",""
"0","rate[7] = gamma;"
"0","rate[8] = delta1;"
"0",""
"0","rate[9] = gamma;"
"0","rate[10] = delta2;"
"0",""
"0","rate[11] = gamma;"
"0","rate[12] = mu;"
"0",""
"0","rate[13] = delta1;"
"0","rate[14] = omega;  "
"0",""
"0","rate[15] = delta2;  "
"0","rate[16] = omega;  "
"0",""
"0","rate[17] = mu;  "
"0","rate[18] = omega;  "
"0",""
"0",""
"0","// compute the several terms"
"0","term[0] = rate[0];"
"0",""
"0","term[1] = rate[1] * S1;"
"0","term[2] = rate[2] * S1;"
"0",""
"0","term[3] = rate[3] * S2;"
"0","term[4] = rate[4] * S2;"
"0",""
"0","term[5] = rate[5] * S3;"
"0","term[6] = rate[6] * S3;"
"0",""
"0","term[7] = rate[7] * I1;"
"0","term[8] = rate[8] * I1;"
"0",""
"0","term[9] = rate[9] * I2;"
"0","term[10] = rate[10] * I2;"
"0",""
"0","term[11] = rate[11] * I3;"
"0","term[12] = rate[12] * I3;"
"0",""
"0","term[13] = rate[13] * R1;"
"0","term[14] = rate[14] * R1;"
"0",""
"0","term[15] = rate[15] * R2;"
"0","term[16] = rate[16] * R2;"
"0",""
"0","term[17] = rate[17] * R3;"
"0","term[18] = rate[18] * R3;"
"0",""
"0",""
"0","DS1 = term[0] - term[1] - term[2] + term[14];"
"0","DI1 = term[1]          - term[7] - term[8];"
"0","DR1 = term[7]          - term[13] - term[14];"
"0","DH1 = term[1];"
"0",""
"0","DS2 = term[2] - term[3] - term[4]  + term[16];"
"0","DI2 = term[3] + term[8]  - term[9] - term[10];"
"0","DR2 = term[9]  + term[13] - term[15] - term[16];"
"0","DH2 = term[3];"
"0",""
"0","DS3 = term[4] - term[5] - term[6] + term[18];"
"0","DI3 = term[5] + term[10] - term[11] - term[12];"
"0","DR3 = term[11] + term[15] - term[17] - term[18];"
"0","DH3 = term[5];"
"0",""
"0",""" "
"0",""
"0","# read in the data"
"0","# add at t=0 a row of NAs to not have problems with the accumulator variable since"
"0","# t0 is much less than t[1]"
"0","setwd(""~/Study/STATS489/PAL_check/rotavirus/pomp-astic/pomp_st+st+/pomp_st+st+_data/mle_gamma_data"")"
"2","Warning: The working directory was changed to /Users/yizehao/Study/STATS489/PAL_check/rotavirus/pomp-astic/pomp_st+st+/pomp_st+st+_data/mle_gamma_data inside a notebook chunk. The working directory will be reset when the chunk is finished running. Use the knitr root.dir option in the setup chunk to change the working directory for notebook chunks."
"0","read.table(""rotavirus.txt"") %>%"
"0","  rbind(data.frame(time=0,cases1=NA,cases2=NA,cases3=NA)) %>%"
"0","  arrange(time) -> dat"
"0",""
"0",""
"0","# define parameters (without betas)"
"0","params_fixed <- c(gamma=1, delta1=1/(5*52),delta2=1/(55*52), alpha=1/(78.86912*52), "
"0","                  mu=1/(18.86912*52), N=82372825, omega=1/(1*52))"
"0","first_data <- c(y1=dat$cases1[2], y2=dat$cases2[2], y3=dat$cases3[2])"
"0",""
"0",""
"0","# initializer"
"0","init <- function(params, t0, ...) {"
"0","  x0 <- c(S1=0,I1=0,R1=0,H1=0,S2=0,I2=0,R2=0,H2=0,S3=0,I3=0,R3=0,H3=0)"
"0","  y <- params[c(""y1"",""y2"",""y3"")]"
"0","  x0[""I1""] <- y[1]/((params[""gamma""]+params[""delta1""]))"
"0","  x0[""I2""] <- (y[2]+params[""delta1""]*x0[""I1""])/((params[""delta2""]+params[""gamma""]))"
"0","  x0[""I3""] <- (y[3]+params[""delta2""]*x0[""I2""])/((params[""mu""]+params[""gamma""]))"
"0","  x0[""S1""] <- (params[""alpha""]*params[""N""]-(params[""gamma""]+params[""delta1""])*x0[""I1""]+"
"0","                 params[""omega""]*(params[""N""]*params[""alpha""]/params[""delta1""]-x0[""I1""]))/(params[""delta1""]+params[""omega""])"
"0","  I_bar    <-  x0[""I1""]+x0[""I2""]+x0[""I3""]"
"0","  x0[""S2""] <- (params[""delta1""]*x0[""S1""]-(params[""delta2""]+params[""gamma""])*x0[""I2""]+params[""delta1""]*x0[""I1""]+"
"0","                 params[""omega""]*(params[""N""]*params[""alpha""]/params[""delta2""]-x0[""I2""]))/(params[""delta2""]+params[""omega""])"
"0","  x0[""S3""] <- (params[""delta2""]*x0[""S2""]-(params[""gamma""]+params[""mu""])*x0[""I3""]+params[""delta2""]*x0[""I2""]+"
"0","                 params[""omega""]*(params[""N""]*params[""alpha""]/params[""mu""]-x0[""I3""]))/(params[""omega""]+params[""mu""])"
"0","  x0[""R1""] <- (params[""N""]*params[""alpha""]/params[""delta1""]-x0[""S1""]-x0[""I1""])"
"0","  x0[""R2""] <- (params[""N""]*params[""alpha""]/params[""delta2""]-x0[""S2""]-x0[""I2""])"
"0","  x0[""R3""] <- (params[""N""]*params[""alpha""]/params[""mu""]-x0[""S3""]-x0[""I3""])"
"0","  round(x0) "
"0","}"
"0",""
"0","## ----rinit-------------------------------------------------"
"0","rinit_raw <- Csnippet("""
"0","  I1 = nearbyint(y1/(gamma+delta1));"
"0","  I2 = nearbyint((y2+delta1*I1)/((delta2+gamma)));"
"0","  I3 = nearbyint((y3+delta2*I2)/((mu+gamma)));"
"0","  S1 = nearbyint((alpha*N-(gamma+delta1)*I1+omega*(N*alpha/delta1-I1))/(delta1+omega));"
"0","  S2 = nearbyint((delta1*S1-(delta2+gamma)*I2+delta1*I1+omega*(N*alpha/delta2-I2))/(delta2+omega));"
"0","  S3 = nearbyint((delta2*S2-(gamma+mu)*I3+delta2*I2+omega*(N*alpha/mu-I3))/(omega+mu));"
"0","  R1 = nearbyint((N*alpha/delta1-S1-I1));"
"0","  R2 = nearbyint((N*alpha/delta2-S2-I2));"
"0","  R3 = nearbyint((N*alpha/mu-S3-I3));"
"0",""")"
"0",""
"0","rinit <- Csnippet("""
"0","    I1=2871;"
"0","    I2=639;"
"0","    I3=174;"
"0","    S1=5.09484e+06;"
"0","    S2=5.73856e+07;"
"0","    S3=1.96976e+07;"
"0","    R1=124410;"
"0","    R2=57072;"
"0","    R3=9578;"
"0","    H1 = 0;"
"0","    H2 = 0;"
"0","    H3 = 0;"
"0",""")"
"0",""
"0","#help parameters with different data ie the mean data"
"0","mean_data <- c(y1=mean(dat$cases1[-1]), y2=mean(dat$cases2[-1]), y3=mean(dat$cases3[-1])) "
"0","help_param <- c(params_fixed,mean_data)"
"0","# analytic guess for the betas"
"0","beta_ana <-  function(params){"
"0","  beta_ana <- c(beta1=0, beta2=0, beta3=0)"
"0","  I_bar <- init(params)[""I1""]+init(params)[""I2""]+init(params)[""I3""]"
"0","  beta_ana[""beta1""] <- ((params[""gamma""]+params[""delta1""])*init(params)[""I1""]*params[""N""])/(init(params)[""S1""]*I_bar)"
"0","  beta_ana[""beta2""] <- ((params[""delta2""]+params[""gamma""])*init(params)[""I2""]-params[""delta1""]*init(params)[""I1""])*params[""N""]/(init(params)[""S2""]*I_bar)"
"0","  beta_ana[""beta3""] <- ((params[""mu""]+params[""gamma""])*init(params)[""I3""]-params[""delta2""]*init(params)[""I2""])*params[""N""]/(init(params)[""S3""]*I_bar)"
"0","  return(beta_ana)"
"0","}"
"0",""
"0","params <- c(beta_ana(help_param), beta11=0.15, phi=0.1, params_fixed,first_data,od=0.3, sigma=0.05)"
"0","params_stocks <- params"
"0","toEst<- Csnippet("""
"0","                 Tbeta1  = log(beta1);"
"0","                 Tbeta2  = log(beta2);"
"0","                 Tbeta3  = log(beta3);"
"0","                 Tbeta11 = logit(beta11);"
"0","                 Tsigma = log(sigma);"
"0","                 Tphi    = logit(phi/(M_2PI));"
"0","                 Tod = log(od);"")"
"0",""
"0","fromEst <-Csnippet("""
"0","                   beta1  = exp(Tbeta1);"
"0","                   beta2  = exp(Tbeta2);"
"0","                   beta3  = exp(Tbeta3);"
"0","                   sigma = exp(Tsigma);"
"0","                   beta11 = expit(Tbeta11);"
"0","                   phi    = M_2PI*expit(Tphi);"
"0","                   od = exp(Tod);"")"
"0",""
"0","pomp(data = dat,"
"0","     times=""time"","
"0","     t0=1-6*52,"
"0","     dmeasure = dmeas,"
"0","     rmeasure = rmeas,"
"0","     rprocess = euler(step.fun = sir.step, delta.t = 1/10),"
"0","     statenames = c(""S1"", ""I1"", ""R1"", ""H1"", ""S2"", ""I2"", ""R2"", ""H2"",""S3"",""I3"", ""R3"", ""H3""),"
"0","     paramnames = names(params),"
"0","     accumvars=c(""H1"", ""H2"", ""H3""),"
"0","     skeleton=vectorfield(Csnippet(sir.skel)),"
"0","     rinit=rinit_raw,"
"0","     toEstimationScale=toEst,"
"0","     fromEstimationScale=fromEst,"
"0","     params = params"
"0",") -> sir"
"2","NOTE: The provided objects ‘toEstimationScale’,‘fromEstimationScale’ are available for use by POMP basic components.
"
